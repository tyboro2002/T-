() read as variant
[] read as list
?? read as optional

term -> (int_lit/identifier)
Expr -> (term / binExpr)
binExpr:
	Expr * Expr (prec = 1)
	Expr + Expr (prec = 0)
Return -> (Expr / string_lit)
say -> string_lit
shout -> string_lit
Exit -> Expr
Identifier -> string + Expr
vardump -> string_lit
input -> identifier
if -> (expr/test) + scope + [elif] + ?else?
elif -> (expr/test) + scope
else -> scope
test -> expr + testToken + expr
Scope -> [(Exit/say/Return/Identifier/shout/Scope/if/input/vardump)]
program -> [(Exit/say/Return/Identifier/shout/Scope/if/input/vardump)]
